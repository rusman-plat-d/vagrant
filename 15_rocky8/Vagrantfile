# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "generic/rocky8"
  config.vm.hostname = "rocky8n15"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"
  config.vm.network "private_network", ip: "192.168.56.15"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"
  config.vm.network "public_network", ip: "192.168.0.15", bridge: "wlo1"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Disable the default share of the current code directory. Doing this
  # provides improved isolation between the vagrant box and your host
  # by making sure your Vagrantfile isn't accessible to the vagrant box.
  # If you use this you may want to enable additional shared subfolders as
  # shown above.
  # config.vm.synced_folder ".", "/vagrant", disabled: true

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
    vb.name = "rocky8n15"
    vb.memory = 10240
    vb.cpus = 8
    # Display the VirtualBox GUI when booting the machine
    # vb.gui = true
  
    # Customize the amount of memory on the VM:
    # vb.memory = "1024"
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
    sudo dnf update -y
    # # sudo dnf install -y https://extras.getpagespeed.com/release-latest.rpm
    sudo dnf -y module reset nginx
    sudo dnf -y module enable nginx:1.24
    sudo dnf install -y firewall-config nano nginx neofetch htop btop
    sudo systemctl enable nginx
    sudo systemctl restart nginx
    sudo firewall-cmd --add-service http

    sudo dnf install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm
    sudo dnf -y install https://rpms.remirepo.net/enterprise/remi-release-8.rpm
    sudo dnf install yum-utils
    sudo dnf -y module reset php
    sudo dnf module list php
    sudo dnf -y module enable php:remi-8.3
    sudo dnf upgrade -y
    sudo dnf install -y git
    sudo dnf install -y php php-cli php-common php-fpm php-mysql php-pdo php-mbstring php-gd php-imagick php-bcmath php-curl php-devel php-intl php-ldap php-pgsql php-redis php-uploadprogress php-xdebug php-zip php-dom php-odbc
    # sudo dnf install -y php81 php81-php-cli php81-php-common php81-php-fpm php81-php-mysql php81-php-pdo php81-php-mbstring php81-php-gd php81-php-imagick php81-php-bcmath php81-php-curl php81-php-devel php81-php-intl php81-php-ldap php81-php-pgsql php81-php-redis php81-php-uploadprogress php81-php-xdebug php81-php-zip php81-php-dom php81-php-odbc
    # sudo dnf install -y php82 php82-php-cli php82-php-common php82-php-fpm php82-php-mysql php82-php-pdo php82-php-mbstring php82-php-gd php82-php-imagick php82-php-bcmath php82-php-curl php82-php-devel php82-php-intl php82-php-ldap php82-php-pgsql php82-php-redis php82-php-uploadprogress php82-php-xdebug php82-php-zip php82-php-dom php82-php-odbc
    sudo dnf install -y php83 php83-php-cli php83-php-common php83-php-fpm php83-php-mysql php83-php-pdo php83-php-mbstring php83-php-gd php83-php-imagick php83-php-bcmath php83-php-curl php83-php-devel php83-php-intl php83-php-ldap php83-php-pgsql php83-php-redis php83-php-uploadprogress php83-php-xdebug php83-php-zip php83-php-dom php83-php-odbc
    # sudo nano /etc/php-fpm.d/www.conf
    # change user & group to nginx
    # /run/php-fpm/www.sock
    sudo systemctl enable php-fpm
    sudo systemctl restart php-fpm
    # sudo nano /etc/opt/remi/php83/php-fpm.d/www.conf
    # change user & group to nginx
    # listen = /run/php-fpm/php83-fpm.sock
    # /var/opt/remi/php83/run/php-fpm/www.sock
    sudo systemctl enable php83-php-fpm
    sudo systemctl restart php83-php-fpm
    sudo dnf remove -y httpd

    php83 -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
    sudo php83 composer-setup.php --install-dir=/usr/bin --filename=composer --2
    sudo php83 composer-setup.php --install-dir=/usr/bin --filename=composer2 --2
    sudo php83 composer-setup.php --install-dir=/usr/bin --filename=composer1 --1
    
    sudo chmod 775 -R /var/www/html && sudo chown $USER:nginx -R /var/www/html

    # sudo nano /etc/nginx/conf.d/ams-ksi.conf
    # sudo chmod 775 -R .
    # sudo chown $USER:nginx -R .
    # sudo chcon -R -t httpd_sys_rw_content_t storage/
    # sudo chmod -R gu+w storage/ && sudo chmod -R guo+w storage/ && sudo chmod -R gu+w bootstrap/cache/ && sudo chmod -R guo+w bootstrap/cache/
    # sudo setsebool -P httpd_can_network_connect_db 1

    sudo dnf install -y mysql-server
    sudo systemctl enable mysqld
    sudo systemctl restart mysqld
    sudo mysql_secure_installation
    # YourStrongP4$$word
  SHELL
end
